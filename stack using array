#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100 // Maximum size of the stack

// Define a stack structure
struct Stack {
    int array[MAX_SIZE];
    int top;
};

// Function to initialize the stack
void initializeStack(struct Stack* stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
int isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(struct Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack overflow. Cannot push %d onto the stack.\n", value);
    } else {
        stack->array[++stack->top] = value;
        printf("Pushed %d onto the stack.\n", value);
    }
}

// Function to pop an element from the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow. The stack is empty.\n");
        return -1; // Return an error value
    } else {
        int value = stack->array[stack->top];
        stack->top--;
        printf("Popped %d from the stack.\n", value);
        return value;
    }
}

// Function to peek at the top element of the stack without removing it
int peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("The stack is empty.\n");
        return -1; // Return an error value
    } else {
        int value = stack->array[stack->top];
        printf("Top element of the stack: %d\n", value);
        return value;
    }
}

int main() {
    struct Stack stack;
    initializeStack(&stack);

    push(&stack, 1);
    push(&stack, 2);
    push(&stack, 3);

    peek(&stack);

    pop(&stack);
    pop(&stack);
    pop(&stack);

    pop(&stack); // Attempting to pop from an empty stack

    return 0;
}
